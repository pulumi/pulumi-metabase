// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * This resources provisions a container running Metabase on AWS ECS Fargate. By default
 * the resource will run the service in the AWS Account's Default VPC unless a VPC is defined. This
 * resource will also deploy the `latest` version of Metabase unless a version is supplied.
 *
 * You can provide specific subnets to host the Load Balancer, Database, and ECS Service, as well
 * as provide a custom domain name for the service.
 *
 * ## Example Usage
 * ### Default
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as metabase from "@pulumi/metabase";
 *
 * const metabaseService = new metabase.Metabase("metabaseService", {});
 * export const url = metabaseService.dnsName;
 * ```
 * {{ /example }}
 * ### Custom Domain & Networking
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as metabase from "@pulumi/metabase";
 *
 * const metabaseService = new metabase.Metabase("metabaseService", {
 *     vpcId: "vpc-123",
 *     networking: {
 *         ecsSubnetIds: [
 *             "subnet-123",
 *             "subnet-456",
 *         ],
 *         dbSubnetIds: [
 *             "subnet-789",
 *             "subnet-abc",
 *         ],
 *         lbSubnetIds: [
 *             "subnet-def",
 *             "subnet-ghi",
 *         ],
 *     },
 *     domain: {
 *         hostedZoneName: "example.com",
 *         domainName: "metabase.example.com",
 *     },
 * });
 * export const url = metabaseService.dnsName;
 * ```
 * {{ /example }}
 */
export class Metabase extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'metabase:index:Metabase';

    /**
     * Returns true if the given object is an instance of Metabase.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Metabase {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Metabase.__pulumiType;
    }

    /**
     * The DNS name for the Metabase instance.
     */
    public /*out*/ readonly dnsName!: pulumi.Output<string>;
    /**
     * The security group id for the Metabase instance.
     */
    public /*out*/ readonly securityGroupId!: pulumi.Output<string>;

    /**
     * Create a Metabase resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: MetabaseArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["database"] = args ? (args.database ? pulumi.output(args.database).apply(inputs.databaseArgsProvideDefaults) : undefined) : undefined;
            resourceInputs["domain"] = args ? args.domain : undefined;
            resourceInputs["metabaseVersion"] = args ? args.metabaseVersion : undefined;
            resourceInputs["networking"] = args ? args.networking : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["dnsName"] = undefined /*out*/;
            resourceInputs["securityGroupId"] = undefined /*out*/;
        } else {
            resourceInputs["dnsName"] = undefined /*out*/;
            resourceInputs["securityGroupId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Metabase.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a Metabase resource.
 */
export interface MetabaseArgs {
    /**
     * Optional arguments for configuring your RDS instance.
     */
    database?: pulumi.Input<inputs.DatabaseArgs>;
    /**
     * Optionally provide a hosted zone and domain name for the Metabase service.
     */
    domain?: pulumi.Input<inputs.CustomDomainArgs>;
    /**
     * The version of Metabase to run - used as a tag on the `metabase/metabase` Dockerhub image.
     */
    metabaseVersion?: pulumi.Input<string>;
    /**
     * Optionally provide specific subnet IDs to run the different resources of Metabase.
     */
    networking?: pulumi.Input<inputs.NetworkingArgs>;
    /**
     * The VPC to use for the Metabase service. If left blank then the default VPC will be used.
     */
    vpcId?: pulumi.Input<string>;
}
